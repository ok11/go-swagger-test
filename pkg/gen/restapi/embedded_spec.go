// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "REST API Foo",
    "title": "Foo",
    "version": "1"
  },
  "basePath": "/foo/v1",
  "paths": {
    "/foos": {
      "post": {
        "description": "Registers a new foo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "baz"
        ],
        "summary": "an operation to create a foo",
        "operationId": "registerFoo",
        "parameters": [
          {
            "description": "Data for the foo to be registered",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Foo"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Foo"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "Fingerprint of the created foo"
              },
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "URI of the registered foo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "Error code",
          "type": "string",
          "example": "RESOURCE_NOT_FOUND"
        },
        "details": {
          "type": "object",
          "required": [
            "code",
            "message"
          ],
          "properties": {
            "code": {
              "description": "Detailed error code",
              "type": "string",
              "example": "MongoDB:2038"
            },
            "message": {
              "description": "Detailed error message",
              "type": "string",
              "example": "MongoDB: no document with ObjectID 42"
            }
          }
        },
        "message": {
          "description": "Error message",
          "type": "string",
          "example": "Requested resource not found"
        },
        "target": {
          "description": "Related resource",
          "type": "string",
          "example": "/products/42"
        }
      }
    },
    "Foo": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "A name of the user",
          "type": "string",
          "example": "Test User"
        }
      }
    }
  },
  "responses": {
    "204": {
      "description": "No Content"
    },
    "400": {
      "description": "Bad Request",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": "MISSING_PARAMETERS",
          "message": "Required parameters missing or incorrect."
        }
      }
    },
    "401": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "headers": {
        "WWW_Authenticate": {
          "type": "string"
        }
      },
      "examples": {
        "application/json": {
          "code": "UNAUTHORIZED",
          "message": "To access API you have to login"
        }
      }
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": "FORBIDDEN",
          "message": "Insufficient privileges to access API"
        }
      }
    },
    "404": {
      "description": "Not Found",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": "RESOURCE_NOT_FOUND",
          "message": "Requested resource not found"
        }
      }
    },
    "412": {
      "description": "Precondition Failed",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": "CONCURRENT_MODIFICATION",
          "message": "The resource was modified in the meanwhile"
        }
      }
    },
    "500": {
      "description": "Internal server error",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": "INTERNAL_SERVER_ERROR",
          "message": "Internal server error occurred, retry after some time. In case the issue persists contact your system administrator"
        }
      }
    },
    "501": {
      "description": "Not Implemented",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": "FEATURE_NOT_IMPLEMENTED",
          "message": "Requested feature is not implemented."
        }
      }
    }
  },
  "tags": [
    {
      "description": "Baz",
      "name": "baz"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "REST API Foo",
    "title": "Foo",
    "version": "1"
  },
  "basePath": "/foo/v1",
  "paths": {
    "/foos": {
      "post": {
        "description": "Registers a new foo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "baz"
        ],
        "summary": "an operation to create a foo",
        "operationId": "registerFoo",
        "parameters": [
          {
            "description": "Data for the foo to be registered",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Foo"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Foo"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "Fingerprint of the created foo"
              },
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "URI of the registered foo"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "MISSING_PARAMETERS",
                "message": "Required parameters missing or incorrect."
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {
              "WWW_Authenticate": {
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "code": "UNAUTHORIZED",
                "message": "To access API you have to login"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Insufficient privileges to access API"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "INTERNAL_SERVER_ERROR",
                "message": "Internal server error occurred, retry after some time. In case the issue persists contact your system administrator"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "Error code",
          "type": "string",
          "example": "RESOURCE_NOT_FOUND"
        },
        "details": {
          "type": "object",
          "required": [
            "code",
            "message"
          ],
          "properties": {
            "code": {
              "description": "Detailed error code",
              "type": "string",
              "example": "MongoDB:2038"
            },
            "message": {
              "description": "Detailed error message",
              "type": "string",
              "example": "MongoDB: no document with ObjectID 42"
            }
          }
        },
        "message": {
          "description": "Error message",
          "type": "string",
          "example": "Requested resource not found"
        },
        "target": {
          "description": "Related resource",
          "type": "string",
          "example": "/products/42"
        }
      }
    },
    "Foo": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "A name of the user",
          "type": "string",
          "example": "Test User"
        }
      }
    }
  },
  "responses": {
    "204": {
      "description": "No Content"
    },
    "400": {
      "description": "Bad Request",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": "MISSING_PARAMETERS",
          "message": "Required parameters missing or incorrect."
        }
      }
    },
    "401": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "headers": {
        "WWW_Authenticate": {
          "type": "string"
        }
      },
      "examples": {
        "application/json": {
          "code": "UNAUTHORIZED",
          "message": "To access API you have to login"
        }
      }
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": "FORBIDDEN",
          "message": "Insufficient privileges to access API"
        }
      }
    },
    "404": {
      "description": "Not Found",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": "RESOURCE_NOT_FOUND",
          "message": "Requested resource not found"
        }
      }
    },
    "412": {
      "description": "Precondition Failed",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": "CONCURRENT_MODIFICATION",
          "message": "The resource was modified in the meanwhile"
        }
      }
    },
    "500": {
      "description": "Internal server error",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": "INTERNAL_SERVER_ERROR",
          "message": "Internal server error occurred, retry after some time. In case the issue persists contact your system administrator"
        }
      }
    },
    "501": {
      "description": "Not Implemented",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": "FEATURE_NOT_IMPLEMENTED",
          "message": "Requested feature is not implemented."
        }
      }
    }
  },
  "tags": [
    {
      "description": "Baz",
      "name": "baz"
    }
  ]
}`))
}
